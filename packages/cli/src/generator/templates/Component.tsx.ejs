import React from "react"
<%_ if (graphqlTypeName) { _%>
import { create<%= relayContainerType %>, graphql } from "react-relay"
import { <%= relayTypeName %> } from "__generated__/<%= relayTypeName %>.graphql"
<%_ } _%>

export interface <%= componentName %>Props {
<%_ if (relayPropName) { _%>
  <%= relayPropName %>: <%= relayTypeName %>
<%_ } _%>
}

<%_ if (classBased) { _%>
export class <%= componentName %> extends React.Component<<%= componentName %>Props> {
  render() {
    return null
  }
}
<%_ } else { _%>
export const <%= componentName %>: React.SFC<<%= componentName %>Props> = props => {
  return null
}
<%_ } _%>

<%_ if (graphqlTypeName) { _%>
export const <%= relayContainerName %> = create<%= relayContainerType %>(
  <%= componentName %>,
  {
    <%= relayPropName %>: graphql`
      fragment <%= relayTypeName %> on <%= graphqlTypeName %><%- relayContainerType === "PaginationContainer" ? " @argumentDefinitions(count: { type: \"Int\", defaultValue: 10 }, cursor: { type: \"String\", defaultValue: \"\" })" : "" %> {
        # TODO: Remove this comment.
        #
        # Most, but not all, types have this field. Relay will automatically select it, so if you need a unique ID field
        # for e.g. React 'key' purposes, use this. Otherwise you can safely remove the selection.
  <%_ if (relayContainerType === "FragmentContainer") { _%>
        __id
      }
    `,
  },
  <%_ } else if (relayContainerType === "RefetchContainer" || relayContainerType === "PaginationContainer") { _%>
        #
        # In the unlikely case your type does not have this field, replace it with a different identifier field and be
        # sure to adjust the query below accordingly.
        __id
    <%_ if (relayContainerType === "PaginationContainer") { _%>
        <%= relayPaginationFieldName %>(first: $count, after: $cursor) @connection(key: "<%= componentName %>_<%= relayPaginationFieldName %>") {
          pageInfo {
            hasNextPage
          }
          edges {
            node {
              # TODO: Remove this comment.
              #
              # This is where your field selections for the list go. As for this identifier field selection, follow the
              # above comment.
              __id
            }
          }
        }
    <%_ } _%>
      }
    `,
  },
    <%_ if (relayContainerType === "RefetchContainer") { _%>
  graphql`
    query <%= componentName %>RefetchQuery($nodeID: ID!) {
      node(__id: $nodeID) {
        ...<%= relayTypeName %>
      }
    }
  `
    <%_ } else { _%>
  {
    direction: "forward",
    getConnectionFromProps(props) {
      return props.<%= relayPropName %>.<%= relayPaginationFieldName %>
    },
    getFragmentVariables(prevVars, totalCount) {
      return {
        ...prevVars,
        count: totalCount,
      }
    },
    getVariables(props, { count, cursor }, fragmentVariables) {
      return {
        // in most cases, for variables other than connection filters like
        // `first`, `after`, etc. you may want to use the previous values.
        ...fragmentVariables,
        count,
        cursor,
        nodeID: props.<%= relayPropName %>.__id,
      }
    },
    query: graphql`
      query <%= componentName %>PaginationQuery(
        $nodeID: ID!
        $count: Int!
        $cursor: String
      ) {
        node(__id: $nodeID) {
          ...<%= relayTypeName %> @arguments(count: $count, cursor: $cursor)
        }
      }
    `,
  }
    <%_ } _%>
  <%_ } else { _%>
    }
  `
  <%_ } _%>
)
<%_ } _%>
